first_number = 2.0001
second_number = 5
third_number = first_number / second_number
print(third_number) # 0.40002000000000004
''' В данном случае мы ожидаем получить число
0.40002, однако в конце через ряд нулей
появляется еще какая-то четверка. Или еще одно выражение: '''

print(2.0001 + 0.1)  # 2.1001000000000003
''' В этот случае для округления результата мы можем
использовать функцию round(): '''

first_number = 2.0001
second_number = 0.1
third_number = first_number + second_number
print(round(third_number, 4))  # 2.1001

''' x = 0b101   # 101 в двоичной системе равно 5
Для определения числа в восьмеричной системе перед 
его значением ставится 0 и префикс o:  '''

a = 0o11    # 11 в восьмеричной системе равно 9
'''  Для определения числа в шестнадцатеричной системе 
перед его значением ставится 0 и префикс x:  '''

y = 0x0a        # a в шестнадцатеричной системе равно 10
'''  И с числами в других системах измерения также можно 
проводить арифметические операции: '''

x = 0b101   # 5
y = 0x0a    # 10
z = x + y   # 15
print("{0} in binary {0:08b}   in hex {0:02x} in octal {0:02o}".format(z))
'''  Для вывода числа в различных системах
исчисления используются функция format, которая 
вызывается у строки. В эту строку передаются
различные форматы. Для двоичной системы "{0:08b}", 
где число 8 указывает, сколько знаков должно быть в
записи числа. Если знаков указано больше, чем требуется
для числа, то ненужные позиции заполняются нулями. Для
шестнадцатеричной системы применяется формат "{0:02x}".
И здесь все аналогично - запись числа состоит из двух знаков,
если один знак не нужен, то вместо него вставляется ноль.
А для записи в восьмеричной системе испольуется формат "{0:02o}".  '''

#Результат работы скрипта:

#15 in binary 00001111   in hex 0f   in octal 17
